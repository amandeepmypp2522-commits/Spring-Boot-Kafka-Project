spring.application.name=ProductsMicroservice

server.port=0

# this property is used to specify bootstrap servers for kafka producer in your spring boot application, a bootstrap server is an initial
# connection point for kafka client to connect to kafka cluster , the value is semicolon separated list of host and port number pairs representing addresses of kafka
#brokers in the cluster. by specifying this property, your kafka producer will be able to establish initial connection with kafka cluster and will be able to send messages to it.
#it better to provide two bootstrap server, if one bootstrap server is down, the second bootstrap server can still be used  to establish the initial connection with the cluster, and once the initial connection with the cluster is established, kafka producer will be able to discover other servers as well.
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#the below property controls how many acknowledgements producer requires from kafka cluster, before considering record sent.default value=1
spring.kafka.producer.acks=all
#no of times kafka producer will try sending message to kafka broker
#spring.kafka.producer.retries=10
#it is used to specify amount of time producer waits before attempting to retry a failed request, in ms
#this will make kafka prdoucer retry sending message 10 times with 1 second time interval.
#spring.kafka.properties.retry.backoff.ms=1000

spring.kafka.producer.properties.delivery.timeout.ms=12000

spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=3000

spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.max.in.flight.requests.per.connections=5
